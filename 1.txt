1A Simple ml program
import numpy as np
from sklearn.datasets import make_blobs
import matplotlib.pyplot as plt
class SimpleSVM:
    def __init__(self, learning_rate=0.001, lambda_param=0.01, n_iters=1000):
        self.lr = learning_rate
        self.lambda_param = lambda_param
        self.n_iters = n_iters
        self.w = None
        self.b = None

    def fit(self, X, y):
        n_samples, n_features = X.shape
        y_ = np.where(y <= 0, -1, 1)

        self.w = np.zeros(n_features)
        self.b = 0

        for _ in range(self.n_iters):
            for idx, x_i, in enumerate(X):
                condition = y_[idx] * (np.dot(x_i, self.w) - self.b) >= 1
                if not condition:
                    self.w -= self.lr * (2 * self.lambda_param * self.w - np.dot(x_i, y_[idx]))
                    self.b -= self.lr * y_[idx]

    def predict(self, X):
        approx = np.dot(X, self.w) - self.b
        return np.sign(approx)
X, y = make_blobs(n_samples=50, n_features=2, centers=2, cluster_std=1.05, random_state=40)
y = np.where(y == 0, -1, 1)
clf = SimpleSVM()
clf.fit(X, y)

def visualize_svm():
    plt.scatter(X[:, 0], X[:, 1], marker="o", c=y)

    x0_1 = np.amin(X[:, 0])
    x0_2 = np.amax(X[:, 0])

    x1_1 = -(clf.w[0] * x0_1 + clf.b) / clf.w[1]
    x1_2 = -(clf.w[0] * x0_2 + clf.b) / clf.w[1]
    plt.plot([x0_1, x0_2], [x1_1, x1_2], "y--")
    plt.xlabel('X1')
    plt.ylabel('X2')
    plt.title('SVM Decision Boundary')
    plt.show()
visualize_svm()

1B . Implement and demonstrate the FIND-S algorithm for finding the most specific hypothesis based on a given set of training data sample

import csv
num_attributes = 5
a = []
with open('C:/Users/Aditi/OneDrive/Documents/Data.csv', 'r') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        a.append(row)
        print(row)
print("\nThe initial value of hypothesis:")
hypothesis = ['0'] * num_attributes
print(hypothesis)
for j in range(num_attributes):
    hypothesis[j] = a[1][j]
print("\nThe a[1] value of hypothesis:")
print(hypothesis)
print("\nFind S: Finding a Maximally Specific Hypothesis\n")
for i in range(len(a)):
    if a[i][num_attributes] == 'Positive':
        for j in range(num_attributes):
            if a[i][j] != hypothesis[j]:
                hypothesis[j] = '?'
            else:
                hypothesis[j] = a[i][j]
    print("For Training instance No:{} the hypothesis is".format(i), hypothesis)
print("\nThe Maximally Specific Hypothesis for a given Training Examples:\n", hypothesis)
