7A hierarchical clustering 
import matplotlib.pyplot as plt
import pandas as pd
import scipy.cluster.hierarchy as sch
from sklearn.cluster import AgglomerativeClustering
dataset = pd.read_csv('C:/Users/Aditi/OneDrive/Documents/abalone.csv')
X = dataset.iloc[:, [3, 4]].values
dendrogram = sch.dendrogram(sch.linkage(X, method="ward"))
plt.title("Dendrogram")
plt.xlabel("Samples")
plt.ylabel("Euclidean distances")
plt.show()
hc = AgglomerativeClustering(n_clusters=5, affinity='euclidean', linkage='ward')
y_hc = hc.fit_predict(X)
print("Cluster Labels: ", y_hc)
colors = ['red', 'blue', 'green', 'cyan', 'magenta']
for cluster_num in range(5):
    plt.scatter(X[y_hc == cluster_num, 0], X[y_hc == cluster_num, 1], s=100, c=colors[cluster_num], label=f'Cluster {cluster_num + 1}')
plt.title("Clusters of Customers (Hierarchical Clustering Model)")
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.legend()
plt.show()

7B Implement the Rule based method and test the same

import pandas as pd
from sklearn.metrics import accuracy_score, confusion_matrix
data = {
    'Tid': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Refund': ['yes', 'no', 'no', 'yes', 'no', 'no', 'yes', 'no', 'no', 'no'],
    'Marital_Status': ['single', 'married', 'single', 'married', 'divorced', 'married', 'divorced', 'married', 'single', 'married'],
    'Taxable_Income': [125, 100, 70, 120, 65, 70, 200, 85, 75, 90],
    'Class': ['no', 'no', 'no', 'no', 'yes', 'no', 'no', 'yes', 'no', 'yes']
}
df = pd.DataFrame(data)
def rule_based_classifier(row):
    if row['Refund'] == 'yes' and row['Marital_Status'] == 'single' and row['Taxable_Income'] > 100:
        return 'yes'
    elif row['Refund'] == 'no' and row['Marital_Status'] == 'married' and row['Taxable_Income'] <= 80:
        return 'yes'
    else:
        return 'no'
df['Prediction'] = df.apply(rule_based_classifier, axis=1)
accuracy = accuracy_score(df['Class'], df['Prediction'])
conf_matrix = confusion_matrix(df['Class'], df['Prediction'])
print(f'Accuracy: {accuracy}')
print('Confusion Matrix:')
print(conf_matrix)
print('\nPrediction Values:')
print(df[['Tid', 'Class', 'Prediction']])

